{"version":3,"sources":["echo.js","app.js"],"names":[],"mappingsfile":"all.js","sourcesContent":["import Echo from \"laravel-echo\"\n\nwindow.Echo = new Echo({\n    broadcaster: 'pusher',\n    key: 'your-pusher-key-here'\n});\n","angular\n    .module(\"app\", [\n        'ui.router'\n    ])\n    .config(['$stateProvider', '$urlRouterProvider', '$urlMatcherFactoryProvider',\n        function($stateProvider, $urlRouterProvider, $urlMatcherFactoryProvider) {\n            var GUID_REGEXP = /^[a-f\\d]{8}-([a-f\\d]{4}-){3}[a-f\\d]{12}$/i;\n            $urlMatcherFactoryProvider.type('guid', {\n                encode: angular.identity,\n                decode: angular.identity,\n                is: function(item) {\n                    return GUID_REGEXP.test(item);\n                }\n            });\n\n            // States\n            $urlRouterProvider.otherwise('/');\n\n            $stateProvider\n                .state('home', {\n                    url: \"/\",\n                    controller: 'AppController'\n                })\n                .state('request', {\n                    url: \"/{id:guid}/{offset:guid}/{page:int}\",\n                    controller: 'AppController'\n                })\n                .state('token', {\n                    url: \"/{id:guid}\",\n                    controller: 'AppController'\n                })\n            ;\n        }\n    ])\n    .controller(\"AppController\", ['$scope', '$http', '$stateParams', '$state', '$timeout', function($scope, $http, $stateParams, $state, $timeout) {\n        /**\n         * Settings handling\n         */\n\n        // Array of scope variables to automatically save\n        var settings = [\n            'redirectEnable',\n            'redirectUrl',\n            'redirectContentType',\n            'redirectMethod',\n            'token',\n            'formatJsonEnable',\n            'autoNavEnable'\n        ];\n\n        $scope.saveSettings = (function () {\n            for (var setting in settings) {\n                window.localStorage.setItem(\n                    settings[setting],\n                    JSON.stringify($scope[settings[setting]])\n                );\n            }\n        });\n\n        $scope.getSetting = (function (name, defaultValue) {\n            var value = window.localStorage.getItem(name);\n\n            if (!value || typeof(value) === 'undefined' || value === 'undefined') {\n                if (typeof(defaultValue) === 'undefined') {\n                    return null;\n                }\n                return defaultValue;\n            }\n\n            return JSON.parse(value);\n        });\n\n        /**\n         * App Initialization\n         */\n\n        $scope.token = $scope.getSetting('token');\n        $scope.requests = {\n            total: 0,\n            data: []\n        };\n        $scope.currentRequestIndex = 0;\n        $scope.currentRequest = {};\n        $scope.currentPage = 1;\n        $scope.hasRequests = false;\n        $scope.protocol = window.location.protocol;\n        $scope.domain = window.location.hostname;\n        $scope.appConfig = window.AppConfig;\n\n        // Load settings\n        $scope.formatJsonEnable = $scope.getSetting('formatJsonEnable', false);\n        $scope.autoNavEnable = $scope.getSetting('autoNavEnable', false);\n        $scope.redirectEnable = $scope.getSetting('redirectEnable', false);\n        $scope.redirectMethod = $scope.getSetting('redirectMethod', '');\n        $scope.redirectUrl = $scope.getSetting('redirectUrl', null);\n        $scope.redirectContentType = $scope.getSetting('redirectContentType', 'text/plain');\n\n        // Initialize Clipboard copy button\n        new Clipboard('.copyTokenUrl');\n\n        // Initialize Pusher\n        // $scope.pusherChannel = null;\n        // $scope.pusher = new Pusher(AppConfig.PusherToken, {\n        //     cluster: 'eu',\n        //     encrypted: true\n        // });\n\n        var socket = io('http://localhost:6001/');\n\n        // Initialize notify.js\n        $.notifyDefaults({\n            placement: {\n                from: \"bottom\"\n            },\n            animate: {\n                enter: \"animated fadeInUp\",\n                exit: \"animated fadeOutDown\"\n            },\n            delay: 1000\n        });\n\n        // Hack to open modals inside that are nested inside divs\n        // Since the modals need to be placed inside the ui-view div\n        $('.openModal').click(function (e) {\n            $($(this).data('modal')).modal();\n            $('.modal-backdrop').appendTo('.mainView');\n            $('body').removeClass();\n        });\n\n        // Automatically save settings\n        $scope.$watch($scope.saveSettings);\n\n        /**\n         * Controller actions\n         */\n\n        $scope.setCurrentRequest = (function(request) {\n            $scope.currentRequestIndex = request.uuid;\n            $scope.currentRequest = request;\n\n            // Change the state url so it may be copied from address bar\n            // and linked somewhere else\n            $state.go('request', {id: $scope.token.uuid, offset: request.uuid, page: $scope.requests.current_page}, {notify: false});\n        });\n\n        $scope.deleteRequest = (function (request, requestIndex) {\n            $http.delete('/token/' + request.token_id + '/request/' + request.uuid);\n\n            // Remove from view\n            $scope.requests.data.splice(requestIndex, 1);\n        });\n\n        $scope.getRequest = (function (tokenId, requestId) {\n            return $http.get('/token/' + tokenId + '/request/' + requestId)\n                .then(function (response) {\n                    return response.data;\n                });\n        });\n\n        $scope.getRequests = (function(token, offset, page) {\n            if (!page) {\n                page = 0;\n            }\n\n            $http.get('/token/' + token + '/requests?page=' + page)\n                .then(function(response) {\n                    $scope.requests = response.data;\n\n                    if (response.data.data.length > 0) {\n                        $scope.hasRequests = true;\n\n                        var activeRequest = 0;\n\n                        for (var requestOffset in $scope.requests.data) {\n                            if ($scope.requests.data[requestOffset].uuid == offset) {\n                                activeRequest = requestOffset;\n                            }\n                        }\n\n                        $scope.setCurrentRequest($scope.requests.data[activeRequest]);\n                    } else {\n                        $scope.hasRequests = false;\n                    }\n                }, function(response) {\n                    $.notify('Requests not found - invalid ID');\n                });\n        });\n\n        $scope.appendRequest = (function (request) {\n            $scope.requests.data.push(request);\n            $scope.$apply();\n\n            if ($scope.currentRequestIndex === 0) {\n                $scope.setCurrentRequest($scope.requests.data[0]);\n            }\n            if ($scope.autoNavEnable) {\n                $scope.setCurrentRequest($scope.requests.data[$scope.requests.data.length - 1]);\n            }\n            if ($scope.redirectEnable) {\n                $scope.redirect(request, $scope.redirectUrl, $scope.redirectMethod, $scope.redirectContentType);\n            }\n\n            $scope.hasRequests = true;\n            $.notify('Request received');\n        });\n\n        $scope.pusherSubscribe = (function (token) {\n            console.log('SUBSCRIBED');\n            socket.on('request.created', function (data) {\n                console.log('DATA');\n                console.log(data);\n                socket.emit('my other event', { my: 'data' });\n            });\n            //socket.on(token, function (data) {\n            //    console.log('DATA');\n            //    console.log(data);\n            //    socket.emit('my other event', { my: 'data' });\n            //});\n            socket.on('connection', function(socket){\n                socket.join(token);\n                console.log('JOIN');\n                console.log(socket);\n            });\n//\n            //$scope.pusherChannel = $scope.pusher.subscribe(token);\n            //$scope.pusherChannel.bind('request.created', function(data) {\n            //    // Pusher only supports messages less than 10240 bytes, so if we had to truncate,\n            //    // the request is fetched directly from the API instead.\n            //    if (data.truncated) {\n            //        $scope.getRequest(data.request.token_id, data.request.uuid).then(function (response) {\n            //            $scope.appendRequest(response);\n            //        });\n            //    } else {\n            //        $scope.appendRequest(data.request);\n            //    }\n\n            //    $scope.requests.total = data.total;\n            //});\n        });\n\n        $scope.getToken = (function(tokenId, offset, page) {\n            if (!tokenId) {\n                $http.post('token')\n                    .then(function(response) {\n                        $state.go('token', {id: response.data.uuid});\n                    });\n            } else {\n                $http.get('token/' + tokenId)\n                    .then(function(response) {\n                        $scope.token = response.data;\n                        $scope.getRequests(response.data.uuid, offset, page);\n                        $scope.pusherSubscribe(tokenId);\n                    }, function(response) {\n                        $.notify('Requests not found - invalid ID');\n                    });\n            }\n        });\n\n        $scope.getCustomToken = (function() {\n            var formData = {};\n            $('#createTokenForm')\n                .serializeArray()\n                .map(function(value) {\n                    if (value.value != '') {\n                        formData[value.name] = value.value;\n                    }\n                });\n\n            $http.post('token', formData)\n                .then(function(response) {\n                    $state.go('token', {id: response.data.uuid});\n                    $.notify('New URL created');\n                });\n        });\n\n        $scope.getNextPage = (function(token) {\n            $http({\n                url: '/token/' + token + '/requests',\n                params: {page: $scope.requests.current_page + 1}\n            }).success(function(data, status, headers, config) {\n                // We use is_last_page to keep track of whether we should load more pages.\n                $scope.requests.is_last_page = data.is_last_page;\n                $scope.requests.current_page = data.current_page;\n                $scope.requests.data = $scope.requests.data.concat(data.data);\n            });\n        });\n\n        $scope.redirect = (function (request, url, method, contentType) {\n            $http({\n                'method': (!method ? request.method : method),\n                'url': url,\n                'data': request.content,\n                'headers': {\n                    'Content-Type': (!contentType ? 'text/plain' : contentType)\n                }\n            }).then(\n                function ok(response) {\n                    $.notify('Redirected request to ' + url + '<br>Status: ' + response.statusText);\n                },\n                function error(response) {\n                    $.notify(\n                        'Error redirecting request to ' + url + '<br>Status: ' + response.statusText,\n                        {\n                            delay: 5000,\n                            type: 'danger'\n                        }\n                    );\n                }\n            );\n        });\n\n        $scope.getLabel = function(method) {\n            switch (method) {\n                case 'POST':\n                    return 'info';\n                case 'GET':\n                    return 'success';\n                case 'DELETE':\n                    return 'danger';\n                case 'HEAD':\n                    return 'primary';\n                case 'PATCH':\n                    return 'warning';\n                default:\n                    return 'default';\n            }\n        };\n\n        /**\n         * JSON formatting\n         */\n\n        $scope.isValidJSON = function (text) {\n            try {\n                JSON.parse(text);\n            } catch (e) {\n                return false;\n            }\n            return true;\n        };\n\n        $scope.formatContentJson = function (content) {\n            if (!content) {\n                return '';\n            }\n\n            try {\n                var json = JSON.parse(content);\n                if (typeof json != 'string') {\n                    json = JSON.stringify(json, undefined, 2);\n                }\n            } catch (e) {\n                return content;\n            }\n            return json;\n        };\n\n        // Initialize app. Check whether we need to load a token.\n        if ($state.current.name) {\n            if ($scope.getSetting('token') && !$stateParams.id) {\n                $state.go('token', {id: $scope.getSetting('token').uuid});\n            } else {\n                $scope.getToken($stateParams.id, $stateParams.offset, $stateParams.page);\n            }\n        }\n    }])\n    .run(['$rootScope', '$state', '$stateParams',\n        function($rootScope, $state, $stateParams) {\n            $rootScope.$state = $state;\n            $rootScope.$stateParams = $stateParams;\n        }]\n    );"]}